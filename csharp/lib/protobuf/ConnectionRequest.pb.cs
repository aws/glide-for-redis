// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: PATH/connection_request.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace ConnectionRequest {

  /// <summary>Holder for reflection information generated from PATH/connection_request.proto</summary>
  internal static partial class ConnectionRequestReflection {

    #region Descriptor
    /// <summary>File descriptor for PATH/connection_request.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ConnectionRequestReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Ch1QQVRIL2Nvbm5lY3Rpb25fcmVxdWVzdC5wcm90bxISY29ubmVjdGlvbl9y",
            "ZXF1ZXN0IjsKC0FkZHJlc3NJbmZvEgwKBGhvc3QYASABKAkSDAoEcG9ydBgC",
            "IAEoDRIQCghpbnNlY3VyZRgDIAEoCCKvAgoRQ29ubmVjdGlvblJlcXVlc3QS",
            "MgoJYWRkcmVzc2VzGAEgAygLMh8uY29ubmVjdGlvbl9yZXF1ZXN0LkFkZHJl",
            "c3NJbmZvEg8KB3VzZV90bHMYAiABKAgSGAoQcmVzcG9uc2VfdGltZW91dBgD",
            "IAEoDRIaChJjb25uZWN0aW9uX3RpbWVvdXQYBCABKA0STwoacmVhZF9mcm9t",
            "X3JlcGxpY2Ffc3RyYXRlZ3kYBSABKA4yKy5jb25uZWN0aW9uX3JlcXVlc3Qu",
            "UmVhZEZyb21SZXBsaWNhU3RyYXRlZ3kSTgoZY29ubmVjdGlvbl9yZXRyeV9z",
            "dHJhdGVneRgGIAEoCzIrLmNvbm5lY3Rpb25fcmVxdWVzdC5Db25uZWN0aW9u",
            "UmV0cnlTdHJhdGVneSJbChdDb25uZWN0aW9uUmV0cnlTdHJhdGVneRIZChFu",
            "dW1iZXJfb2ZfcmV0cmllcxgBIAEoDRIOCgZmYWN0b3IYAiABKA0SFQoNZXhw",
            "b25lbnRfYmFzZRgDIAEoDSpjChdSZWFkRnJvbVJlcGxpY2FTdHJhdGVneRIV",
            "ChFBbHdheXNGcm9tUHJpbWFyeRAAEg4KClJvdW5kUm9iaW4QARIRCg1Mb3dl",
            "c3RMYXRlbmN5EAISDgoKQVpBZmZpbml0eRADYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::ConnectionRequest.ReadFromReplicaStrategy), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::ConnectionRequest.AddressInfo), global::ConnectionRequest.AddressInfo.Parser, new[]{ "Host", "Port", "Insecure" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ConnectionRequest.ConnectionRequest), global::ConnectionRequest.ConnectionRequest.Parser, new[]{ "Addresses", "UseTls", "ResponseTimeout", "ConnectionTimeout", "ReadFromReplicaStrategy", "ConnectionRetryStrategy" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ConnectionRequest.ConnectionRetryStrategy), global::ConnectionRequest.ConnectionRetryStrategy.Parser, new[]{ "NumberOfRetries", "Factor", "ExponentBase" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  internal enum ReadFromReplicaStrategy {
    [pbr::OriginalName("AlwaysFromPrimary")] AlwaysFromPrimary = 0,
    [pbr::OriginalName("RoundRobin")] RoundRobin = 1,
    [pbr::OriginalName("LowestLatency")] LowestLatency = 2,
    [pbr::OriginalName("AZAffinity")] Azaffinity = 3,
  }

  #endregion

  #region Messages
  internal sealed partial class AddressInfo : pb::IMessage<AddressInfo> {
    private static readonly pb::MessageParser<AddressInfo> _parser = new pb::MessageParser<AddressInfo>(() => new AddressInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AddressInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ConnectionRequest.ConnectionRequestReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddressInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddressInfo(AddressInfo other) : this() {
      host_ = other.host_;
      port_ = other.port_;
      insecure_ = other.insecure_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddressInfo Clone() {
      return new AddressInfo(this);
    }

    /// <summary>Field number for the "host" field.</summary>
    public const int HostFieldNumber = 1;
    private string host_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Host {
      get { return host_; }
      set {
        host_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "port" field.</summary>
    public const int PortFieldNumber = 2;
    private uint port_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Port {
      get { return port_; }
      set {
        port_ = value;
      }
    }

    /// <summary>Field number for the "insecure" field.</summary>
    public const int InsecureFieldNumber = 3;
    private bool insecure_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Insecure {
      get { return insecure_; }
      set {
        insecure_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AddressInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AddressInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Host != other.Host) return false;
      if (Port != other.Port) return false;
      if (Insecure != other.Insecure) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Host.Length != 0) hash ^= Host.GetHashCode();
      if (Port != 0) hash ^= Port.GetHashCode();
      if (Insecure != false) hash ^= Insecure.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Host.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Host);
      }
      if (Port != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Port);
      }
      if (Insecure != false) {
        output.WriteRawTag(24);
        output.WriteBool(Insecure);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Host.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Host);
      }
      if (Port != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Port);
      }
      if (Insecure != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AddressInfo other) {
      if (other == null) {
        return;
      }
      if (other.Host.Length != 0) {
        Host = other.Host;
      }
      if (other.Port != 0) {
        Port = other.Port;
      }
      if (other.Insecure != false) {
        Insecure = other.Insecure;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Host = input.ReadString();
            break;
          }
          case 16: {
            Port = input.ReadUInt32();
            break;
          }
          case 24: {
            Insecure = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class ConnectionRequest : pb::IMessage<ConnectionRequest> {
    private static readonly pb::MessageParser<ConnectionRequest> _parser = new pb::MessageParser<ConnectionRequest>(() => new ConnectionRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ConnectionRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ConnectionRequest.ConnectionRequestReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConnectionRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConnectionRequest(ConnectionRequest other) : this() {
      addresses_ = other.addresses_.Clone();
      useTls_ = other.useTls_;
      responseTimeout_ = other.responseTimeout_;
      connectionTimeout_ = other.connectionTimeout_;
      readFromReplicaStrategy_ = other.readFromReplicaStrategy_;
      connectionRetryStrategy_ = other.connectionRetryStrategy_ != null ? other.connectionRetryStrategy_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConnectionRequest Clone() {
      return new ConnectionRequest(this);
    }

    /// <summary>Field number for the "addresses" field.</summary>
    public const int AddressesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::ConnectionRequest.AddressInfo> _repeated_addresses_codec
        = pb::FieldCodec.ForMessage(10, global::ConnectionRequest.AddressInfo.Parser);
    private readonly pbc::RepeatedField<global::ConnectionRequest.AddressInfo> addresses_ = new pbc::RepeatedField<global::ConnectionRequest.AddressInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::ConnectionRequest.AddressInfo> Addresses {
      get { return addresses_; }
    }

    /// <summary>Field number for the "use_tls" field.</summary>
    public const int UseTlsFieldNumber = 2;
    private bool useTls_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool UseTls {
      get { return useTls_; }
      set {
        useTls_ = value;
      }
    }

    /// <summary>Field number for the "response_timeout" field.</summary>
    public const int ResponseTimeoutFieldNumber = 3;
    private uint responseTimeout_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ResponseTimeout {
      get { return responseTimeout_; }
      set {
        responseTimeout_ = value;
      }
    }

    /// <summary>Field number for the "connection_timeout" field.</summary>
    public const int ConnectionTimeoutFieldNumber = 4;
    private uint connectionTimeout_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ConnectionTimeout {
      get { return connectionTimeout_; }
      set {
        connectionTimeout_ = value;
      }
    }

    /// <summary>Field number for the "read_from_replica_strategy" field.</summary>
    public const int ReadFromReplicaStrategyFieldNumber = 5;
    private global::ConnectionRequest.ReadFromReplicaStrategy readFromReplicaStrategy_ = global::ConnectionRequest.ReadFromReplicaStrategy.AlwaysFromPrimary;
    /// <summary>
    /// credentials - TODO - implement
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ConnectionRequest.ReadFromReplicaStrategy ReadFromReplicaStrategy {
      get { return readFromReplicaStrategy_; }
      set {
        readFromReplicaStrategy_ = value;
      }
    }

    /// <summary>Field number for the "connection_retry_strategy" field.</summary>
    public const int ConnectionRetryStrategyFieldNumber = 6;
    private global::ConnectionRequest.ConnectionRetryStrategy connectionRetryStrategy_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ConnectionRequest.ConnectionRetryStrategy ConnectionRetryStrategy {
      get { return connectionRetryStrategy_; }
      set {
        connectionRetryStrategy_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ConnectionRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ConnectionRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!addresses_.Equals(other.addresses_)) return false;
      if (UseTls != other.UseTls) return false;
      if (ResponseTimeout != other.ResponseTimeout) return false;
      if (ConnectionTimeout != other.ConnectionTimeout) return false;
      if (ReadFromReplicaStrategy != other.ReadFromReplicaStrategy) return false;
      if (!object.Equals(ConnectionRetryStrategy, other.ConnectionRetryStrategy)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= addresses_.GetHashCode();
      if (UseTls != false) hash ^= UseTls.GetHashCode();
      if (ResponseTimeout != 0) hash ^= ResponseTimeout.GetHashCode();
      if (ConnectionTimeout != 0) hash ^= ConnectionTimeout.GetHashCode();
      if (ReadFromReplicaStrategy != global::ConnectionRequest.ReadFromReplicaStrategy.AlwaysFromPrimary) hash ^= ReadFromReplicaStrategy.GetHashCode();
      if (connectionRetryStrategy_ != null) hash ^= ConnectionRetryStrategy.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      addresses_.WriteTo(output, _repeated_addresses_codec);
      if (UseTls != false) {
        output.WriteRawTag(16);
        output.WriteBool(UseTls);
      }
      if (ResponseTimeout != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(ResponseTimeout);
      }
      if (ConnectionTimeout != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(ConnectionTimeout);
      }
      if (ReadFromReplicaStrategy != global::ConnectionRequest.ReadFromReplicaStrategy.AlwaysFromPrimary) {
        output.WriteRawTag(40);
        output.WriteEnum((int) ReadFromReplicaStrategy);
      }
      if (connectionRetryStrategy_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(ConnectionRetryStrategy);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += addresses_.CalculateSize(_repeated_addresses_codec);
      if (UseTls != false) {
        size += 1 + 1;
      }
      if (ResponseTimeout != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ResponseTimeout);
      }
      if (ConnectionTimeout != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ConnectionTimeout);
      }
      if (ReadFromReplicaStrategy != global::ConnectionRequest.ReadFromReplicaStrategy.AlwaysFromPrimary) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ReadFromReplicaStrategy);
      }
      if (connectionRetryStrategy_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ConnectionRetryStrategy);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ConnectionRequest other) {
      if (other == null) {
        return;
      }
      addresses_.Add(other.addresses_);
      if (other.UseTls != false) {
        UseTls = other.UseTls;
      }
      if (other.ResponseTimeout != 0) {
        ResponseTimeout = other.ResponseTimeout;
      }
      if (other.ConnectionTimeout != 0) {
        ConnectionTimeout = other.ConnectionTimeout;
      }
      if (other.ReadFromReplicaStrategy != global::ConnectionRequest.ReadFromReplicaStrategy.AlwaysFromPrimary) {
        ReadFromReplicaStrategy = other.ReadFromReplicaStrategy;
      }
      if (other.connectionRetryStrategy_ != null) {
        if (connectionRetryStrategy_ == null) {
          ConnectionRetryStrategy = new global::ConnectionRequest.ConnectionRetryStrategy();
        }
        ConnectionRetryStrategy.MergeFrom(other.ConnectionRetryStrategy);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            addresses_.AddEntriesFrom(input, _repeated_addresses_codec);
            break;
          }
          case 16: {
            UseTls = input.ReadBool();
            break;
          }
          case 24: {
            ResponseTimeout = input.ReadUInt32();
            break;
          }
          case 32: {
            ConnectionTimeout = input.ReadUInt32();
            break;
          }
          case 40: {
            ReadFromReplicaStrategy = (global::ConnectionRequest.ReadFromReplicaStrategy) input.ReadEnum();
            break;
          }
          case 50: {
            if (connectionRetryStrategy_ == null) {
              ConnectionRetryStrategy = new global::ConnectionRequest.ConnectionRetryStrategy();
            }
            input.ReadMessage(ConnectionRetryStrategy);
            break;
          }
        }
      }
    }

  }

  internal sealed partial class ConnectionRetryStrategy : pb::IMessage<ConnectionRetryStrategy> {
    private static readonly pb::MessageParser<ConnectionRetryStrategy> _parser = new pb::MessageParser<ConnectionRetryStrategy>(() => new ConnectionRetryStrategy());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ConnectionRetryStrategy> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ConnectionRequest.ConnectionRequestReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConnectionRetryStrategy() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConnectionRetryStrategy(ConnectionRetryStrategy other) : this() {
      numberOfRetries_ = other.numberOfRetries_;
      factor_ = other.factor_;
      exponentBase_ = other.exponentBase_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConnectionRetryStrategy Clone() {
      return new ConnectionRetryStrategy(this);
    }

    /// <summary>Field number for the "number_of_retries" field.</summary>
    public const int NumberOfRetriesFieldNumber = 1;
    private uint numberOfRetries_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NumberOfRetries {
      get { return numberOfRetries_; }
      set {
        numberOfRetries_ = value;
      }
    }

    /// <summary>Field number for the "factor" field.</summary>
    public const int FactorFieldNumber = 2;
    private uint factor_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Factor {
      get { return factor_; }
      set {
        factor_ = value;
      }
    }

    /// <summary>Field number for the "exponent_base" field.</summary>
    public const int ExponentBaseFieldNumber = 3;
    private uint exponentBase_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ExponentBase {
      get { return exponentBase_; }
      set {
        exponentBase_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ConnectionRetryStrategy);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ConnectionRetryStrategy other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (NumberOfRetries != other.NumberOfRetries) return false;
      if (Factor != other.Factor) return false;
      if (ExponentBase != other.ExponentBase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (NumberOfRetries != 0) hash ^= NumberOfRetries.GetHashCode();
      if (Factor != 0) hash ^= Factor.GetHashCode();
      if (ExponentBase != 0) hash ^= ExponentBase.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (NumberOfRetries != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(NumberOfRetries);
      }
      if (Factor != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Factor);
      }
      if (ExponentBase != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(ExponentBase);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (NumberOfRetries != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NumberOfRetries);
      }
      if (Factor != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Factor);
      }
      if (ExponentBase != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ExponentBase);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ConnectionRetryStrategy other) {
      if (other == null) {
        return;
      }
      if (other.NumberOfRetries != 0) {
        NumberOfRetries = other.NumberOfRetries;
      }
      if (other.Factor != 0) {
        Factor = other.Factor;
      }
      if (other.ExponentBase != 0) {
        ExponentBase = other.ExponentBase;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            NumberOfRetries = input.ReadUInt32();
            break;
          }
          case 16: {
            Factor = input.ReadUInt32();
            break;
          }
          case 24: {
            ExponentBase = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
