name: Node

on:
    push:
        branches: ["main"]
        paths:
            - glide-core/src/**
            - submodules/**
            - node/**
            - utils/cluster_manager.py
            - .github/workflows/node.yml
            - .github/workflows/build-node-wrapper/action.yml
            - .github/workflows/install-shared-dependencies/action.yml
            - .github/workflows/test-benchmark/action.yml
            - .github/workflows/lint-rust/action.yml
            - .github/workflows/install-valkey/action.yml
            - .github/json_matrices/build-matrix.json
    pull_request:
        paths:
            - glide-core/src/**
            - submodules/**
            - node/**
            - utils/cluster_manager.py
            - .github/workflows/node.yml
            - .github/workflows/build-node-wrapper/action.yml
            - .github/workflows/install-shared-dependencies/action.yml
            - .github/workflows/test-benchmark/action.yml
            - .github/workflows/lint-rust/action.yml
            - .github/workflows/install-valkey/action.yml
            - .github/json_matrices/build-matrix.json
    workflow_dispatch:

    pull_request_target:
        types: [labeled]
        paths:
            - glide-core/src/**
            - submodules/**
            - node/**
            - utils/cluster_manager.py
            - .github/workflows/node.yml
            - .github/workflows/build-node-wrapper/action.yml
            - .github/workflows/install-shared-dependencies/action.yml
            - .github/workflows/test-benchmark/action.yml
            - .github/workflows/lint-rust/action.yml
            - .github/workflows/install-valkey/action.yml
            - .github/json_matrices/build-matrix.json
    schedule:
        - cron: "0 1 * * *"

concurrency:
    group: node-${{ github.head_ref || github.ref }}
    cancel-in-progress: true

env:
    CARGO_TERM_COLOR: always

jobs:
    get-matrices:
        runs-on: ubuntu-latest
        outputs:
            should-run: ${{ steps.get-matrices.outputs.should-run }}
            engine-matrix-output: ${{ steps.get-matrices.outputs.engine-matrix-output }}
            host-matrix-output: ${{ steps.get-matrices.outputs.host-matrix-output }}
        steps:
            - uses: actions/checkout@v4
            - id: get-matrices
              uses: ./.github/workflows/create-tests-matrices
              with:
                  language-name: node
            - name: Echo outputs
              run: |
                  echo "should_run: ${{ steps.get-matrices.outputs.should_run }}"
                  echo "engine-matrix-output: ${{ steps.get-matrices.outputs.engine-matrix-output }}"
                  echo "host-matrix-output: ${{ steps.get-matrices.outputs.host-matrix-output }}"
    create-version-matrix:
        runs-on: ubuntu-latest
        needs: get-matrices
        if: ${{ needs.get-matrices.outputs.should-run == 'true' }}
        outputs:
            node-matrix-output: ${{ steps.create-version-matrix.outputs.node-matrix-output }}
        steps:
            - name: Checkout
              uses: actions/checkout@v4

            - name: Create version matrix
              id: create-version-matrix
              shell: bash
              # We want to run the full matrix only for scheduled runs and Core changes
              # For other events we want to run only the always matrix which is first and last version supported
              run: |
                  if [[ "${{ github.event_name }}" == "pull_request" || "${{ github.event_name }}" == "push" ]]; then
                    echo 'node-matrix-output=["16.x","20.x"]' >> $GITHUB_OUTPUT
                  else
                    echo 'node-matrix-output=["16.x","17.x","18.x","19.x","20.x"]' >> $GITHUB_OUTPUT
                  fi

    test-node-ubuntu:
        runs-on: ubuntu-latest
        needs: [create-version-matrix, get-matrices]
        timeout-minutes: 25
        strategy:
            fail-fast: false
            matrix:
                engine: ${{ fromJson(needs.get-matrices.outputs.engine-matrix-output) }}
                node: ${{ fromJson(needs.create-version-matrix.outputs.node-matrix-output)}}
        steps:
            - uses: actions/checkout@v4
              with:
                  submodules: recursive

            - name: Setup Node
              uses: actions/setup-node@v4
              env:
                  ACTIONS_ALLOW_USE_UNSECURE_NODE_VERSION: true
              with:
                  node-version: ${{ matrix.node }}

            - name: Build Node wrapper
              uses: ./.github/workflows/build-node-wrapper
              with:
                  os: "ubuntu"
                  target: "x86_64-unknown-linux-gnu"
                  github-token: ${{ secrets.GITHUB_TOKEN }}
                  engine-version: ${{ matrix.engine.version }}

            - name: test
              run: npm test
              working-directory: ./node

            - name: test hybrid node modules - commonjs
              run: |
                  npm install --package-lock-only
                  npm ci
                  npm run build-and-test
              working-directory: ./node/hybrid-node-tests/commonjs-test
              env:
                  JEST_HTML_REPORTER_OUTPUT_PATH: test-report-commonjs.html

            - name: test hybrid node modules - ecma
              run: |
                  npm install --package-lock-only
                  npm ci
                  npm run build-and-test
              working-directory: ./node/hybrid-node-tests/ecmascript-test
              env:
                  JEST_HTML_REPORTER_OUTPUT_PATH: test-report-ecma.html

            - uses: ./.github/workflows/test-benchmark
              with:
                  language-flag: -node

            - name: Upload test reports
              if: always()
              continue-on-error: true
              uses: actions/upload-artifact@v4
              with:
                  name: test-report-node-${{ matrix.engine.type }}-${{ matrix.engine.version }}-${{ matrix.node }}-ubuntu
                  path: |
                      node/test-report*.html
                      utils/clusters/**
                      benchmarks/results/**

    lint-rust:
        timeout-minutes: 15
        runs-on: ubuntu-latest
        needs: get-matrices
        if: ${{ needs.get-matrices.outputs.should-run == 'true' }}
        steps:
            - uses: actions/checkout@v4
              with:
                  submodules: recursive

            - uses: ./.github/workflows/lint-rust
              with:
                  cargo-toml-folder: ./node/rust-client
              name: lint node rust

    build-node-macos:
        needs: get-matrices
        strategy:
            fail-fast: false
            matrix:
                host:
                    [
                        {
                            "RUNNER": "macos-latest",
                            "OS": "macos",
                            "ARCH": "arm64",
                            "TARGET": "aarch64-apple-darwin",
                        },
                        {
                            "RUNNER": "macos-12",
                            "OS": "macos",
                            "ARCH": "x64",
                            "TARGET": "x86_64-apple-darwin",
                        },
                    ]
                engine: ${{ fromJson(needs.get-matrices.outputs.engine-matrix-output) }}
        if: (github.repository_owner == 'valkey-io' && github.event_name == 'schedule') || github.event.label.name == 'Core changes'
        runs-on: ${{ matrix.host.RUNNER }}
        timeout-minutes: 25
        steps:
            - uses: actions/checkout@v4
              with:
                  submodules: recursive
            - name: Set up Homebrew
              uses: Homebrew/actions/setup-homebrew@master

            - name: Install NodeJS
              run: |
                  brew update
                  brew upgrade || true
                  brew install node

            - name: Downgrade npm major version to 8
              run: |
                  npm i -g npm@8

            - name: Build Node wrapper
              uses: ./.github/workflows/build-node-wrapper
              with:
                  os: "macos"
                  named_os: "darwin"
                  arch: ${{ matrix.host.ARCH }}
                  target: ${{ matrix.host.TARGET }}
                  github-token: ${{ secrets.GITHUB_TOKEN }}
                  engine-version: ${{ matrix.engine.version }}

            - name: test
              run: npm test
              working-directory: ./node

            - name: Upload test reports
              if: always()
              continue-on-error: true
              uses: actions/upload-artifact@v4
              with:
                  name: test-report-node-${{ matrix.engine.type }}-${{ matrix.engine.version }}-${{ matrix.host.OS }}-${{ matrix.host.ARCH }}
                  path: |
                      node/test-report*.html
                      utils/clusters/**
                      benchmarks/results/**

    build-amazonlinux-latest:
        if: (github.repository_owner == 'valkey-io' && github.event_name == 'schedule') || github.event.label.name == 'Core changes'
        runs-on: ubuntu-latest
        container: amazonlinux:latest
        timeout-minutes: 15
        steps:
            - name: Install git
              run: |
                  yum -y remove git
                  yum -y remove git-*
                  yum -y install https://packages.endpointdev.com/rhel/7/os/x86_64/endpoint-repo.x86_64.rpm
                  yum install -y git
                  git --version

            - uses: actions/checkout@v4

            - name: Checkout submodules
              run: |
                  git config --global --add safe.directory "$GITHUB_WORKSPACE"
                  git submodule update --init --recursive

            - name: Install NodeJS
              run: |
                  yum install -y nodejs

            - name: Build Node wrapper
              uses: ./.github/workflows/build-node-wrapper
              with:
                  os: "amazon-linux"
                  target: "x86_64-unknown-linux-gnu"
                  github-token: ${{ secrets.GITHUB_TOKEN }}
                  engine-version: "7.2.5"

            - name: test
              run: npm test
              working-directory: ./node

            - name: Upload test reports
              if: always()
              continue-on-error: true
              uses: actions/upload-artifact@v4
              with:
                  name: test-report-node-amazonlinux
                  path: |
                      node/test-report*.html
                      utils/clusters/**
                      benchmarks/results/**

    build-and-test-linux-musl-on-x86:
        if: (github.repository_owner == 'valkey-io' && github.event_name == 'schedule') || github.event.label.name == 'Core changes'
        name: Build and test Node wrapper on Linux musl
        runs-on: ubuntu-latest
        container:
            image: node:alpine
            options: --user root --privileged

        steps:
            - name: Install git
              run: |
                  apk update
                  apk add git

            - uses: actions/checkout@v4
              with:
                  submodules: recursive

            - name: Setup musl on Linux
              uses: ./.github/workflows/setup-musl-on-linux
              with:
                  workspace: $GITHUB_WORKSPACE
                  npm-scope: ${{ secrets.NPM_SCOPE }}
                  npm-auth-token: ${{ secrets.NPM_AUTH_TOKEN }}

            - name: Build Node wrapper
              uses: ./.github/workflows/build-node-wrapper
              with:
                  os: ubuntu
                  named_os: linux
                  arch: x64
                  target: x86_64-unknown-linux-musl
                  github-token: ${{ secrets.GITHUB_TOKEN }}
                  engine-version: "7.2.5"

            - name: test
              run: npm test
              working-directory: ./node

            - name: Upload test reports
              if: always()
              continue-on-error: true
              uses: actions/upload-artifact@v4
              with:
                  name: test-report-node-linux-musl
                  path: |
                      node/test-report*.html
                      utils/clusters/**
                      benchmarks/results/**
