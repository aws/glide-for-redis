name: Build Node wrapper

inputs:
    os:
        description: "The current operating system"
        required: true
        type: string
        options:
            - amazon-linux
            - macos-latest
            - ubuntu-latest
    named_os:
        description: "The name of the current operating system"
        required: false
        default: "linux"
        type: string
        options:
            - linux
            - darwin
    arch:
        description: "The current architecture"
        required: false
        default: "x64"
        type: string
        options:
            - x64
            - arm64
    target:
        description: "Specified target for rust toolchain, ex. x86_64-apple-darwin"
        type: string
        required: true
    publish:
        description: "Enable building the wrapper in release mode"
        required: false
        type: boolean
        default: "false"
    npm_scope:
        description: "The NPM scope"
        required: false
        type: string
        default: ""

env:
    CARGO_TERM_COLOR: always

runs:
    using: "composite"
    steps:
        - name: Install software dependencies
          uses: ./.github/workflows/install-shared-dependencies
          with:
              os: ${{ inputs.os }}
              target: ${{ inputs.target }}

        - name: Create package.json file
          shell: bash
          working-directory: ./node
          run: |
              # Remove the current package.json if exists
              rm -f package.json
              # set the package name
              name="babushka"
              # derive the OS and architecture from the inputs
              export node_os="${{ inputs.named_os }}"
              export node_arch="${{ inputs.arch }}"
              # set the version
              export package_version="${{ env.RELEASE_VERSION }}"
              # set the package name
              export pkg_name="${name}-${node_os}-${node_arch}"
              # set the scope
              export scope=`if [ "${{ inputs.npm_scope }}" != ''  ]; then echo "${{ inputs.npm_scope }}/"; fi`
              # set the registry scope
              export registry_scope=`if [ "${{ inputs.npm_scope }}" != ''  ]; then echo "${{ inputs.npm_scope }}:"; fi`
              # generate package.json from the template
              envsubst < package.json.tmpl > "package.json"
              cat package.json

        - name: npm install
          shell: bash
          working-directory: ./node
          run: |
              rm -rf node_modules && npm install --frozen-lockfile
              cd rust-client
              npm install

        - name: Build
          shell: bash
          working-directory: ./node
          run: |
              source "$HOME/.cargo/env"
              TARGET_FLAG=`if [ "${{ inputs.target }}" != ''  ]; then echo "--target ${{ inputs.target }}"; fi`
              BUILD_FLAG=`if [ "${{ inputs.publish }}" == 'true' ]; then echo "build:release"; else echo "build"; fi`
              npm run $BUILD_FLAG --build-flags="$TARGET_FLAG"
