plugins {
    id 'java-library'
}

repositories {
    mavenCentral()
}

dependencies {
    // client
    implementation project(':client')

    // lombok
    testCompileOnly 'org.projectlombok:lombok:1.18.30'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.30'

    // junit
    testImplementation 'org.junit.jupiter:junit-jupiter:5.6.2'
    testImplementation 'org.mockito:mockito-junit-jupiter:3.12.4'
}

tasks.register('stopAllAfterTests', Exec) {
    workingDir "${project.rootDir}/../utils"
    commandLine 'python3', 'cluster_manager.py', 'stop', '--prefix', 'redis-cluster', '--keep-folder'
}

// We need to call for stop before and after the test, but gradle doesn't support executing a task
// twice. So there are two identical tasks with different names.
// We need to call for stop in case if previous test run was interrupted/crashed and didn't stop.
tasks.register('stopAllBeforeTests', Exec) {
    workingDir "${project.rootDir}/../utils"
    commandLine 'python3', 'cluster_manager.py', 'stop', '--prefix', 'redis-cluster'
    ignoreExitValue true // ignore fail if servers are stopped before
}

// delete dirs if stop failed due to https://github.com/aws/glide-for-redis/issues/849
tasks.register('clearDirs', Delete) {
    delete "${project.rootDir}/../utils/clusters"
}

tasks.register('startCluster', Exec) {
    workingDir "${project.rootDir}/../utils"
    commandLine 'python3', 'cluster_manager.py', 'start', '--cluster-mode', '-p', '7000', '7001', '7002', '7003', '7004', '7005'
}

tasks.register('startStandalone', Exec) {
    workingDir "${project.rootDir}/../utils"
    commandLine 'python3', 'cluster_manager.py', 'start', '-p', '6380', '-r', '0'
}

test.dependsOn 'stopAllBeforeTests'
stopAllBeforeTests.finalizedBy 'clearDirs'
clearDirs.finalizedBy 'startStandalone'
clearDirs.finalizedBy 'startCluster'
test.finalizedBy 'stopAllAfterTests'
test.dependsOn ':client:buildRustRelease'

tasks.withType(Test) {
    systemProperty 'test.redis.standalone.port', '6380'
    systemProperty 'test.redis.cluster.port', '7000'

    testLogging {
        exceptionFormat "full"
        events "started", "skipped", "passed", "failed"
        showStandardStreams true
    }
    jvmArgs "-Djava.library.path=${project.rootDir}/target/release"
}
